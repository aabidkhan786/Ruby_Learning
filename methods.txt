.chomp() : This will help out in getting rid of printing the new line while getting the input from the terminal

gets : Will ask for user input

.to_f : Convert the string into float value

.to_i : Convert the string into integer value

.reverse() : this will reverse out the order of an array

.sort() : this will osrt out the array alphabatically

.gsub!(/replacing character/,"characterto put onto that place")             #.gsub stands for global substitution
example: user_input.gsub!(/s/,"Th")     #In this example Inm asking the method to replace the s chaacter with Th character.

.each : we apply this method in array to apply the changes in each elements of the array.

.times : it will perform the task on each item in a specified number of times.
ex: 10.times { print "Hello, there" }        # it will ask to perform the task 10 times.

.split: it takes in a string and returns an array. If we pass it a bit of text in parentheses, .split will divide the string wherever it sees that bit of text, called a delimiter. 
For example, text.split(",") : tells Ruby to split up the string text whenever it sees a comma.

.to_a: convert the string into an array

.to_s : Convert the symbol or numbers into string 
:sasquatch.to_s
# ==> "sasquatch"

.to_sym : Convert the string or numbers into symbol
"sasquatch".to_sym
# ==> :sasquatch

.intern : Also work the same as .to_sym

.each_key : We use it in the hash, as the name suggest what it does.
.each_value : We use it in the hash, as the name suggest what is does.

.push : We us the push method to add the element into the existing array.
We also have the shovel operator (<<) to add the elements.
ex:         [1, 2, 3] << 4
            # ==> [1, 2, 3, 4]

.collect : The collect method takes a block and applies the expression in the block to every element in an array.

.collect! : .collect returns a copy of my_nums, but doesnâ€™t change (or mutate) the original my_nums array. If we want to do that, we can use .collect! with an exclamation point.


